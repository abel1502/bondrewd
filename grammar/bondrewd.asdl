-- ASDL file for the Bondrewd language.
-- This defines the AST structure for it.


module Bondrewd {
    -- TODO: Very much incomplete
    file = File(stmt* body)

    stmt = Assign(expr target, expr value, assign_op op)
         | CartridgeHeader(identifier name)
         | Expr(expr value)
         | Pass

    -- TODO: Allow arbitrary exprs for attribute access, not just identifiers
    expr = VarRef(identifier value)
         | Constant(constant value)
         | Attribute(expr value, identifier attr, attr_op type)
         | Call(expr func, call_args args)
         | MacroCall(expr func, expr token_stream)
         | InfixCall(identifier name, expr left, expr right)
         | Subscript(expr value, call_args args)
         | CtimeBlock(expr body)  -- body is always a Block
         | Block(stmt* body, expr value)
         | Defn(defn value)
         | BinOp(binary_op op, expr left, expr right)
         | UnOp(unary_op op, expr operand)
         | Compare(expr left, cmp_op* op, expr* operands)
         | BoolOp(bool_op op, expr* values)
         | Flow(flow value)
         | Return(expr value)
         | Break(expr value)
         | Continue()
         | Expand(expr value)
         | Tuple(expr* values)
         | Array(expr* values)
         | TokenStream(token* tokens)
    
    defn = VarDef(identifier name, expr? type, expr? value, bool mut)
         | ImplDef(expr cls, expr? trait, stmt* body)
         | FuncDef(identifier? name, args_spec args, expr? return_type, expr body)  -- TODO: Forbid deduction of return type?
         | StructDef(identifier? name, args_spec fields)
         | NsDef(identifier* names)
         | TemplateDef(args_spec args, defn body)
        attributes (xtime_flag flag)
        extras """
        defn(auto &&value) :
            defn(std::forward<decltype(value)>(value), DefaultTime()) {}
        """

    flow = If(expr cond, expr body, expr orelse)
         | For(identifier var, expr iter, expr body, expr orelse)
         | While(expr cond, expr body, expr? orelse)
         | Loop(expr body)
        attributes (xtime_flag flag)
        extras """
        flow(auto &&value) :
            flow(std::forward<decltype(value)>(value), DefaultTime()) {}
        """

    -- TODO: Currently, enum-like values are represented by empty variants (good),
    --       but they are stored by reference-counted arena_ptr's (bad). Maybe
    --       should optimize that a bit...
    
    assign_op = AsgnNone | AsgnAdd | AsgnSub | AsgnMul | AsgnDiv | AsgnMod
              | AsgnLShift | AsgnRShift | AsgnBitOr | AsgnBitXor | AsgnBitAnd

    bool_op = And | Or

    binary_op = Add | Sub | Mul | Div | Mod | Pow | LShift | RShift | BitOr | BitXor | BitAnd | BidirCmp

    unary_op = BitInv | Not | UAdd | USub | URef | UStar

    cmp_op = Eq | NotEq | Lt | LtE | Gt | GtE | In | NotIn

    attr_op = AttrInst | AttrStatic

    expr_context = Load | Store  -- TODO: ? | Del

    args_spec = (arg_spec* args, bool with_self)

    arg_spec = (identifier name, expr type, expr? default)
     
    call_args = (call_arg* args, identifier? vararg, identifier? kwarg)

    call_arg = (identifier? name, expr value)

    xtime_flag = CTime | RTime | DefaultTime

    token = "lex::Token"

}