-- ASDL file for the Bondrewd language.
-- This defines the AST structure for it.


module Bondrewd {
    -- TODO: Very much incomplete
    cartridge = Cartridge(identifier name, stmt* body)

    -- TODO: More data for classdef and impldef
    stmt = Assign(expr target, expr value, assign_op op)
         | Expr(expr value)
         | Pass

    -- TODO: allow marking any expression as ctime?
    expr = Name(identifier value)
         | Constant(constant value)
         | Attribute(expr value, identifier attr, attr_op type)
         | Call(expr func, call_args args)
         | Subscript(expr value, call_args args)
         | Block(stmt* body, expr value, bool ctime)
         | Defn(defn value)
         | BinOp(binary_op op, expr left, expr right)
         | UnOp(unary_op op, expr operand)
         | Compare(expr left, cmp_op* op, expr* operands)
         | BoolOp(bool_op op, expr* values)
         | Flow(flow value)
         | Return(expr value)
         | Break(expr value)
         | Continue()
         | Tuple(expr* values)
         | Array(expr* values)
     
    defn = VarDef(identifier name, expr? type, expr? value, bool mut)
         | ImplDef(identifier class_name, identifier? trait_name, expr body)
         | FuncDef(identifier name, arg_defs args, expr? return_type, expr body)
         | ClassDef(identifier name, expr body)
        attributes (xtime_flag flag)

    flow = If(expr cond, expr body, expr orelse)
         | For(identifier var, expr iter, expr body, expr orelse)
         | While(expr cond, expr body, expr? orelse)
         | Loop(expr body)
        attributes (xtime_flag flag)

    -- TODO: Currently, enum-like values are represented by empty variants (good),
    --       but they are stored by reference-counted arena_ptr's (bad). Maybe
    --       should optimize that a bit...
    
    assign_op = AsgnNone | AsgnAdd | AsgnSub | AsgnMul | AsgnDiv | AsgnMod
              | AsgnLShift | AsgnRShift | AsgnBitOr | AsgnBitXor | AsgnBitAnd

    bool_op = And | Or

    binary_op = Add | Sub | Mul | Div | Mod | Pow | LShift | RShift | BitOr | BitXor | BitAnd | BidirCmp

    unary_op = BitInv | Not | UAdd | USub | URef | UStar

    cmp_op = Eq | NotEq | Lt | LtE | Gt | GtE | In | NotIn

    attr_op = AttrInst | AttrStatic

    expr_context = Load | Store  -- TODO: ? | Del

    arg_defs = (arg_def* args)

    arg_def = (identifier name, expr type)
     
    call_args = (call_arg* args, identifier? vararg, identifier? kwarg)

    call_arg = (identifier? name, expr value)

    xtime_flag = CTime | RTime | DefaultTime

}