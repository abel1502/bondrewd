{{ _autogenerated_ }}
#pragma once

#include <bondrewd/internal/common.hpp>
#include <bondrewd/ast/ast.hpp>


namespace bondrewd::ast::nodes {


{%- macro gen_class(name, asdl_type) -%}
{%- if asdl_type is instanceof asdl.Product or asdl_type is instanceof asdl.Constructor %}
{#- Product = concrete struct #}
{#- Constructor = Product without attributes #}
class {{ name }}{% if asdl_type is instanceof asdl.Constructor %} : _ConcreteASTNode{% endif %} {
public:
    #pragma region Fields
    {%- filter indent(width=4) %}
    {{- gen_fields(asdl_type.fields) }}
    {%- if asdl_type.attributes is defined %}
    {{- gen_fields(asdl_type.attributes) }}
    {%- endif %}
    {%- endfilter %}
    #pragma endregion Fields
    {% filter indent(width=4) %}
    {{- gen_service_ctors(name, copy=helpers.copyable(asdl_type)) }}
    {%- endfilter %}

    #pragma region Uniform fields access
    /**
     * Returns a tuple of references to all fields.
     * Note that the tuple may include sequences (std::vector) and optional fields (null unique_ptr's).
     */
    auto get_fields_tuple() {
        return std::tie(
            {%- for field in asdl_type.fields %}
            {{- field.name }}
            {%- if not loop.last %}, {% endif %}
            {%- endfor -%}
        );
    }
    #pragma endregion Uniform fields access
};
{%- elif asdl_type is instanceof asdl.Sum %}
{#- Sum = abstract class #}
class {{ name }} : public _AST<{{ helpers.names_of_alts(asdl_type) | join(", ") }}> {
public:
    #pragma region Constructors
    {%- filter indent(width=4) %}
    {{- gen_ctor(name, asdl_type.attributes, value_arg_types=helpers.names_of_alts(asdl_type)) }}
    {%- endfilter %}
    #pragma endregion Constructors
    {% filter indent(width=4) %}
    {{- gen_service_ctors(name, copy=helpers.copyable(asdl_type)) }}
    {%- endfilter %}

    ~{{ name }}() = default;
    {% filter indent(width=4) %}
    {{- gen_fields(asdl_type.attributes) }}
    {%- endfilter %}
};

{%- for alt in asdl_type.types %}

{{ gen_class(alt.name, alt) }}
{%- endfor %}
{%- endif %}
{%- endmacro %}


{%- macro gen_ctor(name, fields, value_arg_types=None) %}
{%- if value_arg_types is none %}
{%- set value_arg = "" %}
{%- set value_set = "" %}
{%- else %}
{%- set value_arg = "auto &&value" %}
{%- set value_set = "std::forward<decltype(value)>(value)" %}
{%- endif %}
{%- set has_args = (fields | length) > 0 %}
{{ name }}({{ value_arg }}{% for arg in helpers.field_decls(fields) %}, {{ arg }}{% endfor %})
    : _AST({{ value_set }}){% for field in fields %}, std::move({{ field.name }}){% endfor %} {}
{%- endmacro %}


{%- macro gen_fields(fields) %}
{%- for field in helpers.field_decls(fields) %}
{{ field }};
{%- endfor %}
{%- endmacro %}


{%- macro gen_service_ctors(name, copy=True, move=True) %}
#pragma region Service constructors
{{ name }}(const {{ name }} &) = {{ "default" if copy else "delete" }};
{{ name }}({{ name }} &&) = {{ "default" if move else "delete" }};
{{ name }} &operator=(const {{ name }} &) = {{ "default" if copy else "delete" }};
{{ name }} &operator=({{ name }} &&) = {{ "default" if move else "delete" }};
#pragma endregion Service constructors
{%- endmacro %}


{%- for asdl_type in asdl_module.dfns %}

{{ gen_class(asdl_type.name, asdl_type.value) }}
{%- endfor %}


}  // namespace bondrewd::ast::nodes
