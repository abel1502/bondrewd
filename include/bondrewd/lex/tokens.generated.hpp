// AUTOGENERATED by tools/generate_tokens.py on 2023-02-07 15:56:09 UTC.
#pragma once

#include <bondrewd/internal/common.hpp>
#include <bondrewd/lex/scanner.hpp>

#include <string_view>
#include <cstdio>


namespace bondrewd::lex {


enum class Punct {
    LPAR = 0,
    RPAR = 1,
    LSQB = 2,
    RSQB = 3,
    COLON = 4,
    COMMA = 5,
    SEMI = 6,
    PLUS = 7,
    MINUS = 8,
    STAR = 9,
    SLASH = 10,
    VBAR = 11,
    AMPER = 12,
    LESS = 13,
    GREATER = 14,
    EQUAL = 15,
    DOT = 16,
    PERCENT = 17,
    LBRACE = 18,
    RBRACE = 19,
    TILDE = 20,
    CIRCUMFLEX = 21,
    AT = 22,
    EQEQUAL = 23,
    NOTEQUAL = 24,
    LESSEQUAL = 25,
    GREATEREQUAL = 26,
    LEFTSHIFT = 27,
    RIGHTSHIFT = 28,
    PLUSEQUAL = 29,
    MINEQUAL = 30,
    STAREQUAL = 31,
    SLASHEQUAL = 32,
    PERCENTEQUAL = 33,
    AMPEREQUAL = 34,
    VBAREQUAL = 35,
    CIRCUMFLEXEQUAL = 36,
    RARROW = 37,
    RARROW2 = 38,
    LEFTSHIFTEQUAL = 39,
    RIGHTSHIFTEQUAL = 40,
    
};


enum class HardKeyword {
    IF = 0,
    VAR = 1,
    FOR = 2,
    FUNC = 3,
    ELSE = 4,
    WHILE = 5,
    MATCH = 6,
    CLASS = 7,
    TRAIT = 8,
    RETURN = 9,
    IMPORT = 10,
    EXPORT = 11,
    PUBLIC = 12,
    PRIVATE = 13,
    PROTECTED = 14,
    CARTRIDGE = 15,
    
};


const char *punct_to_string(Punct value);

const char *keyword_to_string(HardKeyword value);

Punct string_to_punct(std::string_view value);

HardKeyword string_to_keyword(std::string_view value);


JUST_DECLARE
class MiscTrie {
public:
    #pragma region Verdicts
    enum class Verdict {
        
            none = 0,
        
            line_comment = 1,
        
            punct = 2,
        
            block_comment = 3,
        
            string_quote = 4,
        
    };
    #pragma endregion Verdicts 

    #pragma region Constructors
    MiscTrie() {}
    #pragma endregion Constructors

    #pragma region Service constructors
    MiscTrie(const MiscTrie &) = default;
    MiscTrie(MiscTrie &&) = default;
    MiscTrie &operator=(const MiscTrie &) = default;
    MiscTrie &operator=(MiscTrie &&) = default;
    #pragma endregion Service constructors

    #pragma region Interface
    Verdict feed(Scanner scanner, Punct *punct, char *quote) {
        auto start_pos = scanner.tell();
    switch (scanner.cur()) {
        
            case '/': {
                
    switch (scanner.cur()) {
        
            case '/': {
                
    switch (scanner.cur()) {
        
        default: {
            // "//"
            
    

            return Verdict::line_comment;
        
        } break;
    }

            } break;
        
            case '*': {
                
    switch (scanner.cur()) {
        
        default: {
            // "/*"
            
    

            return Verdict::block_comment;
        
        } break;
    }

            } break;
        
        default: {
            // ""
            scanner.seek(start_pos);
            scanner.advance(0);
    

            return Verdict::none;
        
        } break;
    }

            } break;
        
            case '#': {
                
    switch (scanner.cur()) {
        
        default: {
            // "#"
            
    

            return Verdict::line_comment;
        
        } break;
    }

            } break;
        
            case '"': {
                
    switch (scanner.cur()) {
        
            case '(': {
                
    switch (scanner.cur()) {
        
            case '"': {
                
    switch (scanner.cur()) {
        
        default: {
            // ""(""
            
    
        if (punct) {
            *punct = Punct::LPAR;  // TODO
        }
    

            return Verdict::punct;
        
        } break;
    }

            } break;
        
        default: {
            // """
            scanner.seek(start_pos);
            scanner.advance(1);
    
        if (quote) {
            *quote = '"';
        }
    

            return Verdict::string_quote;
        
        } break;
    }

            } break;
        
            case ')': {
                
    switch (scanner.cur()) {
        
            case '"': {
                
    switch (scanner.cur()) {
        
        default: {
            // "")""
            
    
        if (punct) {
            *punct = Punct::RPAR;  // TODO
        }
    

            return Verdict::punct;
        
        } break;
    }

            } break;
        
        default: {
            // """
            scanner.seek(start_pos);
            scanner.advance(1);
    
        if (quote) {
            *quote = '"';
        }
    

            return Verdict::string_quote;
        
        } break;
    }

            } break;
        
            case '[': {
                
    switch (scanner.cur()) {
        
            case '"': {
                
    switch (scanner.cur()) {
        
        default: {
            // ""[""
            
    
        if (punct) {
            *punct = Punct::LSQB;  // TODO
        }
    

            return Verdict::punct;
        
        } break;
    }

            } break;
        
        default: {
            // """
            scanner.seek(start_pos);
            scanner.advance(1);
    
        if (quote) {
            *quote = '"';
        }
    

            return Verdict::string_quote;
        
        } break;
    }

            } break;
        
            case ']': {
                
    switch (scanner.cur()) {
        
            case '"': {
                
    switch (scanner.cur()) {
        
        default: {
            // ""]""
            
    
        if (punct) {
            *punct = Punct::RSQB;  // TODO
        }
    

            return Verdict::punct;
        
        } break;
    }

            } break;
        
        default: {
            // """
            scanner.seek(start_pos);
            scanner.advance(1);
    
        if (quote) {
            *quote = '"';
        }
    

            return Verdict::string_quote;
        
        } break;
    }

            } break;
        
            case ':': {
                
    switch (scanner.cur()) {
        
            case '"': {
                
    switch (scanner.cur()) {
        
        default: {
            // "":""
            
    
        if (punct) {
            *punct = Punct::COLON;  // TODO
        }
    

            return Verdict::punct;
        
        } break;
    }

            } break;
        
        default: {
            // """
            scanner.seek(start_pos);
            scanner.advance(1);
    
        if (quote) {
            *quote = '"';
        }
    

            return Verdict::string_quote;
        
        } break;
    }

            } break;
        
            case ',': {
                
    switch (scanner.cur()) {
        
            case '"': {
                
    switch (scanner.cur()) {
        
        default: {
            // "",""
            
    
        if (punct) {
            *punct = Punct::COMMA;  // TODO
        }
    

            return Verdict::punct;
        
        } break;
    }

            } break;
        
        default: {
            // """
            scanner.seek(start_pos);
            scanner.advance(1);
    
        if (quote) {
            *quote = '"';
        }
    

            return Verdict::string_quote;
        
        } break;
    }

            } break;
        
            case ';': {
                
    switch (scanner.cur()) {
        
            case '"': {
                
    switch (scanner.cur()) {
        
        default: {
            // "";""
            
    
        if (punct) {
            *punct = Punct::SEMI;  // TODO
        }
    

            return Verdict::punct;
        
        } break;
    }

            } break;
        
        default: {
            // """
            scanner.seek(start_pos);
            scanner.advance(1);
    
        if (quote) {
            *quote = '"';
        }
    

            return Verdict::string_quote;
        
        } break;
    }

            } break;
        
            case '+': {
                
    switch (scanner.cur()) {
        
            case '"': {
                
    switch (scanner.cur()) {
        
        default: {
            // ""+""
            
    
        if (punct) {
            *punct = Punct::PLUS;  // TODO
        }
    

            return Verdict::punct;
        
        } break;
    }

            } break;
        
            case '=': {
                
    switch (scanner.cur()) {
        
            case '"': {
                
    switch (scanner.cur()) {
        
        default: {
            // ""+=""
            
    
        if (punct) {
            *punct = Punct::PLUSEQUAL;  // TODO
        }
    

            return Verdict::punct;
        
        } break;
    }

            } break;
        
        default: {
            // """
            scanner.seek(start_pos);
            scanner.advance(1);
    
        if (quote) {
            *quote = '"';
        }
    

            return Verdict::string_quote;
        
        } break;
    }

            } break;
        
        default: {
            // """
            scanner.seek(start_pos);
            scanner.advance(1);
    
        if (quote) {
            *quote = '"';
        }
    

            return Verdict::string_quote;
        
        } break;
    }

            } break;
        
            case '-': {
                
    switch (scanner.cur()) {
        
            case '"': {
                
    switch (scanner.cur()) {
        
        default: {
            // ""-""
            
    
        if (punct) {
            *punct = Punct::MINUS;  // TODO
        }
    

            return Verdict::punct;
        
        } break;
    }

            } break;
        
            case '=': {
                
    switch (scanner.cur()) {
        
            case '"': {
                
    switch (scanner.cur()) {
        
        default: {
            // ""-=""
            
    
        if (punct) {
            *punct = Punct::MINEQUAL;  // TODO
        }
    

            return Verdict::punct;
        
        } break;
    }

            } break;
        
        default: {
            // """
            scanner.seek(start_pos);
            scanner.advance(1);
    
        if (quote) {
            *quote = '"';
        }
    

            return Verdict::string_quote;
        
        } break;
    }

            } break;
        
            case '>': {
                
    switch (scanner.cur()) {
        
            case '"': {
                
    switch (scanner.cur()) {
        
        default: {
            // ""->""
            
    
        if (punct) {
            *punct = Punct::RARROW;  // TODO
        }
    

            return Verdict::punct;
        
        } break;
    }

            } break;
        
        default: {
            // """
            scanner.seek(start_pos);
            scanner.advance(1);
    
        if (quote) {
            *quote = '"';
        }
    

            return Verdict::string_quote;
        
        } break;
    }

            } break;
        
        default: {
            // """
            scanner.seek(start_pos);
            scanner.advance(1);
    
        if (quote) {
            *quote = '"';
        }
    

            return Verdict::string_quote;
        
        } break;
    }

            } break;
        
            case '*': {
                
    switch (scanner.cur()) {
        
            case '"': {
                
    switch (scanner.cur()) {
        
        default: {
            // ""*""
            
    
        if (punct) {
            *punct = Punct::STAR;  // TODO
        }
    

            return Verdict::punct;
        
        } break;
    }

            } break;
        
            case '=': {
                
    switch (scanner.cur()) {
        
            case '"': {
                
    switch (scanner.cur()) {
        
        default: {
            // ""*=""
            
    
        if (punct) {
            *punct = Punct::STAREQUAL;  // TODO
        }
    

            return Verdict::punct;
        
        } break;
    }

            } break;
        
        default: {
            // """
            scanner.seek(start_pos);
            scanner.advance(1);
    
        if (quote) {
            *quote = '"';
        }
    

            return Verdict::string_quote;
        
        } break;
    }

            } break;
        
        default: {
            // """
            scanner.seek(start_pos);
            scanner.advance(1);
    
        if (quote) {
            *quote = '"';
        }
    

            return Verdict::string_quote;
        
        } break;
    }

            } break;
        
            case '/': {
                
    switch (scanner.cur()) {
        
            case '"': {
                
    switch (scanner.cur()) {
        
        default: {
            // ""/""
            
    
        if (punct) {
            *punct = Punct::SLASH;  // TODO
        }
    

            return Verdict::punct;
        
        } break;
    }

            } break;
        
            case '=': {
                
    switch (scanner.cur()) {
        
            case '"': {
                
    switch (scanner.cur()) {
        
        default: {
            // ""/=""
            
    
        if (punct) {
            *punct = Punct::SLASHEQUAL;  // TODO
        }
    

            return Verdict::punct;
        
        } break;
    }

            } break;
        
        default: {
            // """
            scanner.seek(start_pos);
            scanner.advance(1);
    
        if (quote) {
            *quote = '"';
        }
    

            return Verdict::string_quote;
        
        } break;
    }

            } break;
        
        default: {
            // """
            scanner.seek(start_pos);
            scanner.advance(1);
    
        if (quote) {
            *quote = '"';
        }
    

            return Verdict::string_quote;
        
        } break;
    }

            } break;
        
            case '|': {
                
    switch (scanner.cur()) {
        
            case '"': {
                
    switch (scanner.cur()) {
        
        default: {
            // ""|""
            
    
        if (punct) {
            *punct = Punct::VBAR;  // TODO
        }
    

            return Verdict::punct;
        
        } break;
    }

            } break;
        
            case '=': {
                
    switch (scanner.cur()) {
        
            case '"': {
                
    switch (scanner.cur()) {
        
        default: {
            // ""|=""
            
    
        if (punct) {
            *punct = Punct::VBAREQUAL;  // TODO
        }
    

            return Verdict::punct;
        
        } break;
    }

            } break;
        
        default: {
            // """
            scanner.seek(start_pos);
            scanner.advance(1);
    
        if (quote) {
            *quote = '"';
        }
    

            return Verdict::string_quote;
        
        } break;
    }

            } break;
        
        default: {
            // """
            scanner.seek(start_pos);
            scanner.advance(1);
    
        if (quote) {
            *quote = '"';
        }
    

            return Verdict::string_quote;
        
        } break;
    }

            } break;
        
            case '&': {
                
    switch (scanner.cur()) {
        
            case '"': {
                
    switch (scanner.cur()) {
        
        default: {
            // ""&""
            
    
        if (punct) {
            *punct = Punct::AMPER;  // TODO
        }
    

            return Verdict::punct;
        
        } break;
    }

            } break;
        
            case '=': {
                
    switch (scanner.cur()) {
        
            case '"': {
                
    switch (scanner.cur()) {
        
        default: {
            // ""&=""
            
    
        if (punct) {
            *punct = Punct::AMPEREQUAL;  // TODO
        }
    

            return Verdict::punct;
        
        } break;
    }

            } break;
        
        default: {
            // """
            scanner.seek(start_pos);
            scanner.advance(1);
    
        if (quote) {
            *quote = '"';
        }
    

            return Verdict::string_quote;
        
        } break;
    }

            } break;
        
        default: {
            // """
            scanner.seek(start_pos);
            scanner.advance(1);
    
        if (quote) {
            *quote = '"';
        }
    

            return Verdict::string_quote;
        
        } break;
    }

            } break;
        
            case '<': {
                
    switch (scanner.cur()) {
        
            case '"': {
                
    switch (scanner.cur()) {
        
        default: {
            // ""<""
            
    
        if (punct) {
            *punct = Punct::LESS;  // TODO
        }
    

            return Verdict::punct;
        
        } break;
    }

            } break;
        
            case '=': {
                
    switch (scanner.cur()) {
        
            case '"': {
                
    switch (scanner.cur()) {
        
        default: {
            // ""<=""
            
    
        if (punct) {
            *punct = Punct::LESSEQUAL;  // TODO
        }
    

            return Verdict::punct;
        
        } break;
    }

            } break;
        
        default: {
            // """
            scanner.seek(start_pos);
            scanner.advance(1);
    
        if (quote) {
            *quote = '"';
        }
    

            return Verdict::string_quote;
        
        } break;
    }

            } break;
        
            case '<': {
                
    switch (scanner.cur()) {
        
            case '"': {
                
    switch (scanner.cur()) {
        
        default: {
            // ""<<""
            
    
        if (punct) {
            *punct = Punct::LEFTSHIFT;  // TODO
        }
    

            return Verdict::punct;
        
        } break;
    }

            } break;
        
            case '=': {
                
    switch (scanner.cur()) {
        
            case '"': {
                
    switch (scanner.cur()) {
        
        default: {
            // ""<<=""
            
    
        if (punct) {
            *punct = Punct::LEFTSHIFTEQUAL;  // TODO
        }
    

            return Verdict::punct;
        
        } break;
    }

            } break;
        
        default: {
            // """
            scanner.seek(start_pos);
            scanner.advance(1);
    
        if (quote) {
            *quote = '"';
        }
    

            return Verdict::string_quote;
        
        } break;
    }

            } break;
        
        default: {
            // """
            scanner.seek(start_pos);
            scanner.advance(1);
    
        if (quote) {
            *quote = '"';
        }
    

            return Verdict::string_quote;
        
        } break;
    }

            } break;
        
        default: {
            // """
            scanner.seek(start_pos);
            scanner.advance(1);
    
        if (quote) {
            *quote = '"';
        }
    

            return Verdict::string_quote;
        
        } break;
    }

            } break;
        
            case '>': {
                
    switch (scanner.cur()) {
        
            case '"': {
                
    switch (scanner.cur()) {
        
        default: {
            // "">""
            
    
        if (punct) {
            *punct = Punct::GREATER;  // TODO
        }
    

            return Verdict::punct;
        
        } break;
    }

            } break;
        
            case '=': {
                
    switch (scanner.cur()) {
        
            case '"': {
                
    switch (scanner.cur()) {
        
        default: {
            // "">=""
            
    
        if (punct) {
            *punct = Punct::GREATEREQUAL;  // TODO
        }
    

            return Verdict::punct;
        
        } break;
    }

            } break;
        
        default: {
            // """
            scanner.seek(start_pos);
            scanner.advance(1);
    
        if (quote) {
            *quote = '"';
        }
    

            return Verdict::string_quote;
        
        } break;
    }

            } break;
        
            case '>': {
                
    switch (scanner.cur()) {
        
            case '"': {
                
    switch (scanner.cur()) {
        
        default: {
            // "">>""
            
    
        if (punct) {
            *punct = Punct::RIGHTSHIFT;  // TODO
        }
    

            return Verdict::punct;
        
        } break;
    }

            } break;
        
            case '=': {
                
    switch (scanner.cur()) {
        
            case '"': {
                
    switch (scanner.cur()) {
        
        default: {
            // "">>=""
            
    
        if (punct) {
            *punct = Punct::RIGHTSHIFTEQUAL;  // TODO
        }
    

            return Verdict::punct;
        
        } break;
    }

            } break;
        
        default: {
            // """
            scanner.seek(start_pos);
            scanner.advance(1);
    
        if (quote) {
            *quote = '"';
        }
    

            return Verdict::string_quote;
        
        } break;
    }

            } break;
        
        default: {
            // """
            scanner.seek(start_pos);
            scanner.advance(1);
    
        if (quote) {
            *quote = '"';
        }
    

            return Verdict::string_quote;
        
        } break;
    }

            } break;
        
        default: {
            // """
            scanner.seek(start_pos);
            scanner.advance(1);
    
        if (quote) {
            *quote = '"';
        }
    

            return Verdict::string_quote;
        
        } break;
    }

            } break;
        
            case '=': {
                
    switch (scanner.cur()) {
        
            case '"': {
                
    switch (scanner.cur()) {
        
        default: {
            // ""=""
            
    
        if (punct) {
            *punct = Punct::EQUAL;  // TODO
        }
    

            return Verdict::punct;
        
        } break;
    }

            } break;
        
            case '=': {
                
    switch (scanner.cur()) {
        
            case '"': {
                
    switch (scanner.cur()) {
        
        default: {
            // ""==""
            
    
        if (punct) {
            *punct = Punct::EQEQUAL;  // TODO
        }
    

            return Verdict::punct;
        
        } break;
    }

            } break;
        
        default: {
            // """
            scanner.seek(start_pos);
            scanner.advance(1);
    
        if (quote) {
            *quote = '"';
        }
    

            return Verdict::string_quote;
        
        } break;
    }

            } break;
        
            case '>': {
                
    switch (scanner.cur()) {
        
            case '"': {
                
    switch (scanner.cur()) {
        
        default: {
            // ""=>""
            
    
        if (punct) {
            *punct = Punct::RARROW2;  // TODO
        }
    

            return Verdict::punct;
        
        } break;
    }

            } break;
        
        default: {
            // """
            scanner.seek(start_pos);
            scanner.advance(1);
    
        if (quote) {
            *quote = '"';
        }
    

            return Verdict::string_quote;
        
        } break;
    }

            } break;
        
        default: {
            // """
            scanner.seek(start_pos);
            scanner.advance(1);
    
        if (quote) {
            *quote = '"';
        }
    

            return Verdict::string_quote;
        
        } break;
    }

            } break;
        
            case '.': {
                
    switch (scanner.cur()) {
        
            case '"': {
                
    switch (scanner.cur()) {
        
        default: {
            // "".""
            
    
        if (punct) {
            *punct = Punct::DOT;  // TODO
        }
    

            return Verdict::punct;
        
        } break;
    }

            } break;
        
        default: {
            // """
            scanner.seek(start_pos);
            scanner.advance(1);
    
        if (quote) {
            *quote = '"';
        }
    

            return Verdict::string_quote;
        
        } break;
    }

            } break;
        
            case '%': {
                
    switch (scanner.cur()) {
        
            case '"': {
                
    switch (scanner.cur()) {
        
        default: {
            // ""%""
            
    
        if (punct) {
            *punct = Punct::PERCENT;  // TODO
        }
    

            return Verdict::punct;
        
        } break;
    }

            } break;
        
            case '=': {
                
    switch (scanner.cur()) {
        
            case '"': {
                
    switch (scanner.cur()) {
        
        default: {
            // ""%=""
            
    
        if (punct) {
            *punct = Punct::PERCENTEQUAL;  // TODO
        }
    

            return Verdict::punct;
        
        } break;
    }

            } break;
        
        default: {
            // """
            scanner.seek(start_pos);
            scanner.advance(1);
    
        if (quote) {
            *quote = '"';
        }
    

            return Verdict::string_quote;
        
        } break;
    }

            } break;
        
        default: {
            // """
            scanner.seek(start_pos);
            scanner.advance(1);
    
        if (quote) {
            *quote = '"';
        }
    

            return Verdict::string_quote;
        
        } break;
    }

            } break;
        
            case '{': {
                
    switch (scanner.cur()) {
        
            case '"': {
                
    switch (scanner.cur()) {
        
        default: {
            // ""{""
            
    
        if (punct) {
            *punct = Punct::LBRACE;  // TODO
        }
    

            return Verdict::punct;
        
        } break;
    }

            } break;
        
        default: {
            // """
            scanner.seek(start_pos);
            scanner.advance(1);
    
        if (quote) {
            *quote = '"';
        }
    

            return Verdict::string_quote;
        
        } break;
    }

            } break;
        
            case '}': {
                
    switch (scanner.cur()) {
        
            case '"': {
                
    switch (scanner.cur()) {
        
        default: {
            // ""}""
            
    
        if (punct) {
            *punct = Punct::RBRACE;  // TODO
        }
    

            return Verdict::punct;
        
        } break;
    }

            } break;
        
        default: {
            // """
            scanner.seek(start_pos);
            scanner.advance(1);
    
        if (quote) {
            *quote = '"';
        }
    

            return Verdict::string_quote;
        
        } break;
    }

            } break;
        
            case '~': {
                
    switch (scanner.cur()) {
        
            case '"': {
                
    switch (scanner.cur()) {
        
        default: {
            // ""~""
            
    
        if (punct) {
            *punct = Punct::TILDE;  // TODO
        }
    

            return Verdict::punct;
        
        } break;
    }

            } break;
        
        default: {
            // """
            scanner.seek(start_pos);
            scanner.advance(1);
    
        if (quote) {
            *quote = '"';
        }
    

            return Verdict::string_quote;
        
        } break;
    }

            } break;
        
            case '^': {
                
    switch (scanner.cur()) {
        
            case '"': {
                
    switch (scanner.cur()) {
        
        default: {
            // ""^""
            
    
        if (punct) {
            *punct = Punct::CIRCUMFLEX;  // TODO
        }
    

            return Verdict::punct;
        
        } break;
    }

            } break;
        
            case '=': {
                
    switch (scanner.cur()) {
        
            case '"': {
                
    switch (scanner.cur()) {
        
        default: {
            // ""^=""
            
    
        if (punct) {
            *punct = Punct::CIRCUMFLEXEQUAL;  // TODO
        }
    

            return Verdict::punct;
        
        } break;
    }

            } break;
        
        default: {
            // """
            scanner.seek(start_pos);
            scanner.advance(1);
    
        if (quote) {
            *quote = '"';
        }
    

            return Verdict::string_quote;
        
        } break;
    }

            } break;
        
        default: {
            // """
            scanner.seek(start_pos);
            scanner.advance(1);
    
        if (quote) {
            *quote = '"';
        }
    

            return Verdict::string_quote;
        
        } break;
    }

            } break;
        
            case '@': {
                
    switch (scanner.cur()) {
        
            case '"': {
                
    switch (scanner.cur()) {
        
        default: {
            // ""@""
            
    
        if (punct) {
            *punct = Punct::AT;  // TODO
        }
    

            return Verdict::punct;
        
        } break;
    }

            } break;
        
        default: {
            // """
            scanner.seek(start_pos);
            scanner.advance(1);
    
        if (quote) {
            *quote = '"';
        }
    

            return Verdict::string_quote;
        
        } break;
    }

            } break;
        
            case '!': {
                
    switch (scanner.cur()) {
        
            case '=': {
                
    switch (scanner.cur()) {
        
            case '"': {
                
    switch (scanner.cur()) {
        
        default: {
            // ""!=""
            
    
        if (punct) {
            *punct = Punct::NOTEQUAL;  // TODO
        }
    

            return Verdict::punct;
        
        } break;
    }

            } break;
        
        default: {
            // """
            scanner.seek(start_pos);
            scanner.advance(1);
    
        if (quote) {
            *quote = '"';
        }
    

            return Verdict::string_quote;
        
        } break;
    }

            } break;
        
        default: {
            // """
            scanner.seek(start_pos);
            scanner.advance(1);
    
        if (quote) {
            *quote = '"';
        }
    

            return Verdict::string_quote;
        
        } break;
    }

            } break;
        
        default: {
            // """
            
    
        if (quote) {
            *quote = '"';
        }
    

            return Verdict::string_quote;
        
        } break;
    }

            } break;
        
            case '\'': {
                
    switch (scanner.cur()) {
        
        default: {
            // "\'"
            
    
        if (quote) {
            *quote = '\'';
        }
    

            return Verdict::string_quote;
        
        } break;
    }

            } break;
        
        default: {
            // ""
            scanner.seek(start_pos);
            scanner.advance(0);
    

            return Verdict::none;
        
        } break;
    }

    }
    #pragma endregion Interface

};

PROMISE_DEFINITION(class MiscTrie);


JUST_DECLARE
class StringTrie {
public:
    #pragma region Verdicts
    enum class Verdict {
        
            none = 0,
        
            end_quote = 1,
        
            escape = 2,
        
    };
    #pragma endregion Verdicts 

    #pragma region Constructors
    StringTrie() {}
    #pragma endregion Constructors

    #pragma region Service constructors
    StringTrie(const StringTrie &) = default;
    StringTrie(StringTrie &&) = default;
    StringTrie &operator=(const StringTrie &) = default;
    StringTrie &operator=(StringTrie &&) = default;
    #pragma endregion Service constructors

    #pragma region Interface
    Verdict feed(Scanner scanner, char *quote, char *escape) {
        auto start_pos = scanner.tell();
    switch (scanner.cur()) {
        
            case '\\': {
                
    switch (scanner.cur()) {
        
            case '\'': {
                
    switch (scanner.cur()) {
        
        default: {
            // "\\\'"
            
    
        if (escape) {
            *escape = '\'';
        }
    

            return Verdict::escape;
        
        } break;
    }

            } break;
        
            case '"': {
                
    switch (scanner.cur()) {
        
        default: {
            // "\\""
            
    
        if (escape) {
            *escape = '"';
        }
    

            return Verdict::escape;
        
        } break;
    }

            } break;
        
            case 'n': {
                
    switch (scanner.cur()) {
        
        default: {
            // "\\n"
            
    
        if (escape) {
            *escape = 'n';
        }
    

            return Verdict::escape;
        
        } break;
    }

            } break;
        
            case 'r': {
                
    switch (scanner.cur()) {
        
        default: {
            // "\\r"
            
    
        if (escape) {
            *escape = 'r';
        }
    

            return Verdict::escape;
        
        } break;
    }

            } break;
        
            case 't': {
                
    switch (scanner.cur()) {
        
        default: {
            // "\\t"
            
    
        if (escape) {
            *escape = 't';
        }
    

            return Verdict::escape;
        
        } break;
    }

            } break;
        
            case '0': {
                
    switch (scanner.cur()) {
        
        default: {
            // "\\0"
            
    
        if (escape) {
            *escape = '0';
        }
    

            return Verdict::escape;
        
        } break;
    }

            } break;
        
            case '\\': {
                
    switch (scanner.cur()) {
        
        default: {
            // "\\\\"
            
    
        if (escape) {
            *escape = '\\';
        }
    

            return Verdict::escape;
        
        } break;
    }

            } break;
        
        default: {
            // ""
            scanner.seek(start_pos);
            scanner.advance(0);
    

            return Verdict::none;
        
        } break;
    }

            } break;
        
            case '\'': {
                
    switch (scanner.cur()) {
        
        default: {
            // "\'"
            
    
        if (quote) {
            *quote = '\'';
        }
    

            return Verdict::end_quote;
        
        } break;
    }

            } break;
        
            case '"': {
                
    switch (scanner.cur()) {
        
        default: {
            // """
            
    
        if (quote) {
            *quote = '"';
        }
    

            return Verdict::end_quote;
        
        } break;
    }

            } break;
        
        default: {
            // ""
            scanner.seek(start_pos);
            scanner.advance(0);
    

            return Verdict::none;
        
        } break;
    }

    }
    #pragma endregion Interface

};

PROMISE_DEFINITION(class StringTrie);


JUST_DECLARE
class BlockCommentTrie {
public:
    #pragma region Verdicts
    enum class Verdict {
        
            none = 0,
        
            end = 1,
        
            start = 2,
        
    };
    #pragma endregion Verdicts 

    #pragma region Constructors
    BlockCommentTrie() {}
    #pragma endregion Constructors

    #pragma region Service constructors
    BlockCommentTrie(const BlockCommentTrie &) = default;
    BlockCommentTrie(BlockCommentTrie &&) = default;
    BlockCommentTrie &operator=(const BlockCommentTrie &) = default;
    BlockCommentTrie &operator=(BlockCommentTrie &&) = default;
    #pragma endregion Service constructors

    #pragma region Interface
    Verdict feed(Scanner scanner) {
        auto start_pos = scanner.tell();
    switch (scanner.cur()) {
        
            case '/': {
                
    switch (scanner.cur()) {
        
            case '*': {
                
    switch (scanner.cur()) {
        
        default: {
            // "/*"
            

            return Verdict::start;
        
        } break;
    }

            } break;
        
        default: {
            // ""
            scanner.seek(start_pos);
            scanner.advance(0);

            return Verdict::none;
        
        } break;
    }

            } break;
        
            case '*': {
                
    switch (scanner.cur()) {
        
            case '/': {
                
    switch (scanner.cur()) {
        
        default: {
            // "*/"
            

            return Verdict::end;
        
        } break;
    }

            } break;
        
        default: {
            // ""
            scanner.seek(start_pos);
            scanner.advance(0);

            return Verdict::none;
        
        } break;
    }

            } break;
        
        default: {
            // ""
            scanner.seek(start_pos);
            scanner.advance(0);

            return Verdict::none;
        
        } break;
    }

    }
    #pragma endregion Interface

};

PROMISE_DEFINITION(class BlockCommentTrie);


}  // namespace bondrewd::lex
